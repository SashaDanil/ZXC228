import requests
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import asyncio
import aiohttp
from bs4 import BeautifulSoup
import logging
import os.path

API_TOKEN = '8032304693:AAH0e-7Oz3xfcOt2HNC95BRdIjDQ-j5xHSA'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp = Dispatcher(bot, storage=MemoryStorage())

main_menu = InlineKeyboardMarkup()
button_crypto = InlineKeyboardButton('ü™ô–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ü™ô', callback_data='crypto')
button_fiat = InlineKeyboardButton('üí∞–§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞üí∞', callback_data='fiat')
button_news = InlineKeyboardButton('üì¢–ù–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µüì¢', callback_data ='news')
button_video = InlineKeyboardButton('üöÄ–¢—Ä–µ–π–¥–∏–Ω–≥ —Å –Ω—É–ª—èüöÄ', callback_data = 'video')
button_platforms = InlineKeyboardButton('üëç–õ—É—á—à–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ãüëç', callback_data='platforms')
main_menu.row(button_crypto, button_fiat)
main_menu.row(button_platforms)
main_menu.row(button_video)
main_menu.row(button_news)

def crypto_menu():
    menu = InlineKeyboardMarkup()
    button_btc = InlineKeyboardButton('üìà –ë–∏—Ç–∫–æ–∏–Ω', callback_data='btc')
    button_eth = InlineKeyboardButton('ü™ô –≠—Ñ–∏—Ä–∏—É–º', callback_data='eth')
    button_xrp = InlineKeyboardButton('üí∏ XRP', callback_data='xrp')
    button_trump = InlineKeyboardButton('üôç‚Äç‚ôÇÔ∏è BNB', callback_data='trump')
    button_back = InlineKeyboardButton('‚ùå –ù–∞–∑–∞–¥ ‚ùå', callback_data='back')
    menu.row(button_btc)
    menu.row(button_eth)
    menu.row(button_xrp)
    menu.row(button_trump)
    menu.row(button_back)
    return menu

fiat_menu = InlineKeyboardMarkup()
button_dollar = InlineKeyboardButton('üá∫üá≤ –î–æ–ª–ª–∞—Ä', callback_data='dollar')
button_euro = InlineKeyboardButton('üá™üá∫ –ï–≤—Ä–æ', callback_data='euro')
button_yuan = InlineKeyboardButton('üá®üá≥ –Æ–∞–Ω—å', callback_data='yuan')
button_yen = InlineKeyboardButton('üá∞üáø –¢–µ–Ω–≥–µ', callback_data='yen')
button_back_fiat = InlineKeyboardButton('‚ùå –ù–∞–∑–∞–¥ ‚ùå', callback_data='back_fiat')
fiat_menu.row(button_dollar)
fiat_menu.row(button_euro)
fiat_menu.row(button_yuan)
fiat_menu.row(button_yen)
fiat_menu.row(button_back_fiat)

@dp.callback_query_handler(lambda query: query.data == 'video')
async def send_local_video(callback_query: CallbackQuery):
    file_path = r'C:\Users\Win11\bot\–°–∞–º–∞—è_–ø—Ä–æ—Å—Ç–∞—è_—Å—Ç—Ä–∞—Ç–µ–≥–∏—è_–¥–ª—è_—Ç–æ—Ä–≥–æ–≤–ª–∏_–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π_–Ω–æ–≤–∏—á–∫–∞–º_#shorts.mp4'
    
    if not os.path.exists(file_path):
        await callback_query.message.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    try:
        with open(file_path, 'rb') as video:
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close1")
            )
            
            await callback_query.message.answer_video(video, caption='–≠—Ç–æ –≤–∏–¥–µ–æ –∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º, –∫–∞–∫ –Ω–æ–≤–∏—á–∫—É –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ!!!', reply_markup=keyboard)
    except Exception as e:
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {file_path}. –û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(lambda query: query.data == 'close1')
async def close_message(callback_query: CallbackQuery):
    await callback_query.message.delete()

@dp.callback_query_handler(lambda query: query.data == 'close')
async def close_message(callback_query: CallbackQuery):
    await callback_query.message.delete()

async def get_currency_rate(currency):
    url = {
        'btc': 'https://www.rbc.ru/crypto/currency/btcusd',
        'eth': 'https://www.rbc.ru/crypto/currency/ethusd',
        'xrp': 'https://www.rbc.ru/crypto/currency/xrpusd',
        'trump': 'https://www.rbc.ru/crypto/currency/bnbusdt',
        'dollar': 'https://www.rbc.ru/quote/ticker/72413',
        'euro': 'https://www.rbc.ru/quote/ticker/338243',
        'yuan': 'https://www.rbc.ru/quote/ticker/59066',
        'yen': 'https://www.rbc.ru/quote/ticker/193076',
        'news': 'https://www.rbc.ru/crypto/news/67aca4cd9a794706b1703236'
    }.get(currency)

    if not url:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è.'

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')

                if currency in ['btc', 'eth', 'xrp', 'trump']:
                    rate_element = soup.find('div', class_='chart__subtitle')
                elif currency == 'news':
                    news_elements = soup.find_all('div', class_='article__header__title')
                    return '\n\n'.join([news.text.strip() for news in news_elements[:5]])
                else:
                    rate_element = soup.find('span', class_='chart__info__sum')

                if rate_element:
                    rate = rate_element.text.strip()
                else:
                    rate = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        rate = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'

    return rate

@dp.callback_query_handler(lambda query: query.data == 'news')
async def get_crypto_news(query: types.CallbackQuery):
    try:
        news = await get_currency_rate('news')
        
        close_button = InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        keyboard = InlineKeyboardMarkup().add(close_button)
        
        await query.message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ:\n\n{news}", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"Error fetching news: {e}")
        await query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await query.answer()

@dp.callback_query_handler(lambda query: query.data == 'news')
async def get_crypto_news(query: types.CallbackQuery):
    try:
        news = await get_currency_rate('news')
        await query.message.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ:\n\n{news}")
    except Exception as e:
        logging.error(f"Error fetching news: {e}")
        await query.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await query.answer()

        back_button = InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close')
        back_keyboard = InlineKeyboardMarkup().add(back_button)
        await bot.send_message(chat_id=query.message.chat.id, text=news, reply_markup=back_keyboard)
        if query.data in ['back_crypto', 'back_fiat']:
            await query.message.edit_caption(caption='üíµ –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç—ã –∏ –≤–∞–ª—é—Ç—ã. ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu)
@dp.callback_query_handler(lambda query: query.data == 'close')
async def close_news(query: types.CallbackQuery):
    await query.message.delete()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    image_url = 'https://etoday.kz/wp-content/uploads/2023/04/Bitcoin-780x470.jpg'
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=image_url,
        caption='üíµ –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç—ã –∏ –≤–∞–ª—é—Ç—ã. ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        reply_markup=main_menu
    )
@dp.callback_query_handler(lambda query: query.data in ['btc', 'eth', 'xrp', 'trump', 'dollar', 'euro', 'yuan', 'yen', 'crypto', 'fiat', 'back', 'back_crypto', 'back_fiat', 'platforms'])
async def inline_callback(query: types.CallbackQuery):
    if query.data in ['btc', 'eth', 'xrp', 'trump', 'dollar', 'euro', 'yuan', 'yen']:
        try:
            rate = await get_currency_rate(query.data)
            currency_names = {'btc': 'Bitcoin', 'eth': 'Ethereum', 'xrp': 'XRP', 'trump': 'BNB',
                              'dollar': '–î–æ–ª–ª–∞—Ä', 'euro': '–ï–≤—Ä–æ', 'yuan': '–Æ–∞–Ω—å', 'yen': '–¢–µ–Ω–≥–µ'}
            menu = crypto_menu() if query.data in ['btc', 'eth', 'xrp', 'trump'] else fiat_menu
            await query.message.edit_caption(
                caption=f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {currency_names[query.data]}: {rate}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                reply_markup=menu
            )
        except Exception as e:
            await query.message.edit_caption(
                caption="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=menu
            )
    elif query.data == 'crypto':
        await query.message.edit_caption(caption='–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', reply_markup=crypto_menu())
    elif query.data == 'fiat':
        await query.message.edit_caption(caption='–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—ã —Å—Ç—Ä–∞–Ω:', reply_markup=fiat_menu)
    elif query.data == 'back':
        await query.message.edit_caption(caption='üíµ –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç—ã –∏ –≤–∞–ª—é—Ç—ã. ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu)
    elif query.data == 'platforms':
        platforms_message = (
            "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–∑ –ª—É—á—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:\n"
            "-Binance - https://www.binance.com/ru \n"
            "-Coinbase - https://www.coinbase.com/ \n"
            "-Huobi Global - https://www.huobi.com/en-us/ \n"
            "-KuCoin - https://www.kucoin.com/ \n"
            "–ö–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º.\n\n"
        )
        back_button = InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_platforms')
        back_keyboard = InlineKeyboardMarkup().add(back_button)
        await bot.send_message(chat_id=query.message.chat.id, text=platforms_message, reply_markup=back_keyboard)
    elif query.data in ['back_crypto', 'back_fiat']:
        await query.message.edit_caption(caption='üíµ –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç—ã –∏ –≤–∞–ª—é—Ç—ã. ü™ô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=main_menu)

@dp.callback_query_handler(lambda query: query.data == 'close_platforms')
async def close_platforms(query: types.CallbackQuery):
    await query.message.delete()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
